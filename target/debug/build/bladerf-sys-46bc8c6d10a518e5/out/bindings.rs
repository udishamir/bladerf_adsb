/* automatically generated by rust-bindgen 0.70.1 */

pub const BLADERF_DESCRIPTION_LENGTH: u32 = 33;
pub const BLADERF_SERIAL_LENGTH: u32 = 33;
pub const BLADERF_DIRECTION_MASK: u32 = 1;
pub const BLADERF_PRIuFREQ: &[u8; 3] = b"lu\0";
pub const BLADERF_PRIxFREQ: &[u8; 3] = b"lx\0";
pub const BLADERF_SCNuFREQ: &[u8; 3] = b"lu\0";
pub const BLADERF_SCNxFREQ: &[u8; 3] = b"lx\0";
pub const BLADERF_PRIuTS: &[u8; 3] = b"lu\0";
pub const BLADERF_PRIxTS: &[u8; 3] = b"lx\0";
pub const BLADERF_SCNuTS: &[u8; 3] = b"lu\0";
pub const BLADERF_SCNxTS: &[u8; 3] = b"lx\0";
pub const BLADERF_META_STATUS_OVERRUN: u32 = 1;
pub const BLADERF_META_STATUS_UNDERRUN: u32 = 2;
pub const BLADERF_META_FLAG_TX_BURST_START: u32 = 1;
pub const BLADERF_META_FLAG_TX_BURST_END: u32 = 2;
pub const BLADERF_META_FLAG_TX_NOW: u32 = 4;
pub const BLADERF_META_FLAG_TX_UPDATE_TIMESTAMP: u32 = 8;
pub const BLADERF_META_FLAG_RX_NOW: u32 = 2147483648;
pub const BLADERF_META_FLAG_RX_HW_UNDERFLOW: u32 = 1;
pub const BLADERF_META_FLAG_RX_HW_MINIEXP1: u32 = 65536;
pub const BLADERF_META_FLAG_RX_HW_MINIEXP2: u32 = 131072;
pub const BLADERF_IMAGE_MAGIC_LEN: u32 = 7;
pub const BLADERF_IMAGE_CHECKSUM_LEN: u32 = 32;
pub const BLADERF_IMAGE_RESERVED_LEN: u32 = 128;
pub const BLADERF_ERR_UNEXPECTED: i32 = -1;
pub const BLADERF_ERR_RANGE: i32 = -2;
pub const BLADERF_ERR_INVAL: i32 = -3;
pub const BLADERF_ERR_MEM: i32 = -4;
pub const BLADERF_ERR_IO: i32 = -5;
pub const BLADERF_ERR_TIMEOUT: i32 = -6;
pub const BLADERF_ERR_NODEV: i32 = -7;
pub const BLADERF_ERR_UNSUPPORTED: i32 = -8;
pub const BLADERF_ERR_MISALIGNED: i32 = -9;
pub const BLADERF_ERR_CHECKSUM: i32 = -10;
pub const BLADERF_ERR_NO_FILE: i32 = -11;
pub const BLADERF_ERR_UPDATE_FPGA: i32 = -12;
pub const BLADERF_ERR_UPDATE_FW: i32 = -13;
pub const BLADERF_ERR_TIME_PAST: i32 = -14;
pub const BLADERF_ERR_QUEUE_FULL: i32 = -15;
pub const BLADERF_ERR_FPGA_OP: i32 = -16;
pub const BLADERF_ERR_PERMISSION: i32 = -17;
pub const BLADERF_ERR_WOULD_BLOCK: i32 = -18;
pub const BLADERF_ERR_NOT_INIT: i32 = -19;
pub const BLADERF_SAMPLERATE_MIN: u32 = 80000;
pub const BLADERF_SAMPLERATE_REC_MAX: u32 = 40000000;
pub const BLADERF_BANDWIDTH_MIN: u32 = 1500000;
pub const BLADERF_BANDWIDTH_MAX: u32 = 28000000;
pub const BLADERF_FREQUENCY_MIN_XB200: u32 = 0;
pub const BLADERF_FREQUENCY_MIN: u32 = 237500000;
pub const BLADERF_FREQUENCY_MAX: u32 = 3800000000;
pub const BLADERF_FLASH_ADDR_FIRMWARE: u32 = 0;
pub const BLADERF_FLASH_BYTE_LEN_FIRMWARE: u32 = 196608;
pub const BLADERF_FLASH_ADDR_CAL: u32 = 196608;
pub const BLADERF_FLASH_BYTE_LEN_CAL: u32 = 256;
pub const BLADERF_FLASH_ADDR_FPGA: u32 = 262144;
pub const BLADERF_RXVGA1_GAIN_MIN: u32 = 5;
pub const BLADERF_RXVGA1_GAIN_MAX: u32 = 30;
pub const BLADERF_RXVGA2_GAIN_MIN: u32 = 0;
pub const BLADERF_RXVGA2_GAIN_MAX: u32 = 30;
pub const BLADERF_TXVGA1_GAIN_MIN: i32 = -35;
pub const BLADERF_TXVGA1_GAIN_MAX: i32 = -4;
pub const BLADERF_TXVGA2_GAIN_MIN: u32 = 0;
pub const BLADERF_TXVGA2_GAIN_MAX: u32 = 25;
pub const BLADERF_LNA_GAIN_MID_DB: u32 = 3;
pub const BLADERF_LNA_GAIN_MAX_DB: u32 = 6;
pub const BLADERF_SMB_FREQUENCY_MAX: u32 = 200000000;
pub const BLADERF_SMB_FREQUENCY_MIN: u32 = 139682;
pub const BLADERF_GPIO_LMS_RX_ENABLE: u32 = 2;
pub const BLADERF_GPIO_LMS_TX_ENABLE: u32 = 4;
pub const BLADERF_GPIO_TX_LB_ENABLE: u32 = 16;
pub const BLADERF_GPIO_TX_HB_ENABLE: u32 = 8;
pub const BLADERF_GPIO_COUNTER_ENABLE: u32 = 512;
pub const BLADERF_GPIO_RX_MUX_SHIFT: u32 = 8;
pub const BLADERF_GPIO_RX_LB_ENABLE: u32 = 64;
pub const BLADERF_GPIO_RX_HB_ENABLE: u32 = 32;
pub const BLADERF_GPIO_FEATURE_SMALL_DMA_XFER: u32 = 128;
pub const BLADERF_GPIO_PACKET: u32 = 524288;
pub const BLADERF_GPIO_8BIT_MODE: u32 = 1048576;
pub const BLADERF_GPIO_AGC_ENABLE: u32 = 262144;
pub const BLADERF_GPIO_TIMESTAMP: u32 = 65536;
pub const BLADERF_GPIO_TIMESTAMP_DIV2: u32 = 131072;
pub const BLADERF_GPIO_PACKET_CORE_PRESENT: u32 = 268435456;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf {
    _unused: [u8; 0],
}
pub const bladerf_backend_BLADERF_BACKEND_ANY: bladerf_backend = 0;
pub const bladerf_backend_BLADERF_BACKEND_LINUX: bladerf_backend = 1;
pub const bladerf_backend_BLADERF_BACKEND_LIBUSB: bladerf_backend = 2;
pub const bladerf_backend_BLADERF_BACKEND_CYPRESS: bladerf_backend = 3;
pub const bladerf_backend_BLADERF_BACKEND_DUMMY: bladerf_backend = 100;
pub type bladerf_backend = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_devinfo {
    pub backend: bladerf_backend,
    pub serial: [::std::os::raw::c_char; 33usize],
    pub usb_bus: u8,
    pub usb_addr: u8,
    pub instance: ::std::os::raw::c_uint,
    pub manufacturer: [::std::os::raw::c_char; 33usize],
    pub product: [::std::os::raw::c_char; 33usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_devinfo"][::std::mem::size_of::<bladerf_devinfo>() - 112usize];
    ["Alignment of bladerf_devinfo"][::std::mem::align_of::<bladerf_devinfo>() - 4usize];
    ["Offset of field: bladerf_devinfo::backend"]
        [::std::mem::offset_of!(bladerf_devinfo, backend) - 0usize];
    ["Offset of field: bladerf_devinfo::serial"]
        [::std::mem::offset_of!(bladerf_devinfo, serial) - 4usize];
    ["Offset of field: bladerf_devinfo::usb_bus"]
        [::std::mem::offset_of!(bladerf_devinfo, usb_bus) - 37usize];
    ["Offset of field: bladerf_devinfo::usb_addr"]
        [::std::mem::offset_of!(bladerf_devinfo, usb_addr) - 38usize];
    ["Offset of field: bladerf_devinfo::instance"]
        [::std::mem::offset_of!(bladerf_devinfo, instance) - 40usize];
    ["Offset of field: bladerf_devinfo::manufacturer"]
        [::std::mem::offset_of!(bladerf_devinfo, manufacturer) - 44usize];
    ["Offset of field: bladerf_devinfo::product"]
        [::std::mem::offset_of!(bladerf_devinfo, product) - 77usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_backendinfo {
    pub handle_count: ::std::os::raw::c_int,
    pub handle: *mut ::std::os::raw::c_void,
    pub lock_count: ::std::os::raw::c_int,
    pub lock: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_backendinfo"][::std::mem::size_of::<bladerf_backendinfo>() - 32usize];
    ["Alignment of bladerf_backendinfo"][::std::mem::align_of::<bladerf_backendinfo>() - 8usize];
    ["Offset of field: bladerf_backendinfo::handle_count"]
        [::std::mem::offset_of!(bladerf_backendinfo, handle_count) - 0usize];
    ["Offset of field: bladerf_backendinfo::handle"]
        [::std::mem::offset_of!(bladerf_backendinfo, handle) - 8usize];
    ["Offset of field: bladerf_backendinfo::lock_count"]
        [::std::mem::offset_of!(bladerf_backendinfo, lock_count) - 16usize];
    ["Offset of field: bladerf_backendinfo::lock"]
        [::std::mem::offset_of!(bladerf_backendinfo, lock) - 24usize];
};
extern "C" {
    pub fn bladerf_open(
        device: *mut *mut bladerf,
        device_identifier: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_close(device: *mut bladerf);
}
extern "C" {
    pub fn bladerf_open_with_devinfo(
        device: *mut *mut bladerf,
        devinfo: *mut bladerf_devinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_device_list(devices: *mut *mut bladerf_devinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_free_device_list(devices: *mut bladerf_devinfo);
}
extern "C" {
    pub fn bladerf_init_devinfo(info: *mut bladerf_devinfo);
}
extern "C" {
    pub fn bladerf_get_devinfo(
        dev: *mut bladerf,
        info: *mut bladerf_devinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_backendinfo(
        dev: *mut bladerf,
        info: *mut bladerf_backendinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_devinfo_from_str(
        devstr: *const ::std::os::raw::c_char,
        info: *mut bladerf_devinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_devinfo_matches(a: *const bladerf_devinfo, b: *const bladerf_devinfo) -> bool;
}
extern "C" {
    pub fn bladerf_devstr_matches(
        dev_str: *const ::std::os::raw::c_char,
        info: *mut bladerf_devinfo,
    ) -> bool;
}
extern "C" {
    pub fn bladerf_backend_str(backend: bladerf_backend) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bladerf_set_usb_reset_on_open(enabled: bool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_range {
    pub min: i64,
    pub max: i64,
    pub step: i64,
    pub scale: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_range"][::std::mem::size_of::<bladerf_range>() - 32usize];
    ["Alignment of bladerf_range"][::std::mem::align_of::<bladerf_range>() - 8usize];
    ["Offset of field: bladerf_range::min"][::std::mem::offset_of!(bladerf_range, min) - 0usize];
    ["Offset of field: bladerf_range::max"][::std::mem::offset_of!(bladerf_range, max) - 8usize];
    ["Offset of field: bladerf_range::step"][::std::mem::offset_of!(bladerf_range, step) - 16usize];
    ["Offset of field: bladerf_range::scale"]
        [::std::mem::offset_of!(bladerf_range, scale) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_serial {
    pub serial: [::std::os::raw::c_char; 33usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_serial"][::std::mem::size_of::<bladerf_serial>() - 33usize];
    ["Alignment of bladerf_serial"][::std::mem::align_of::<bladerf_serial>() - 1usize];
    ["Offset of field: bladerf_serial::serial"]
        [::std::mem::offset_of!(bladerf_serial, serial) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_version {
    pub major: u16,
    pub minor: u16,
    pub patch: u16,
    pub describe: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_version"][::std::mem::size_of::<bladerf_version>() - 16usize];
    ["Alignment of bladerf_version"][::std::mem::align_of::<bladerf_version>() - 8usize];
    ["Offset of field: bladerf_version::major"]
        [::std::mem::offset_of!(bladerf_version, major) - 0usize];
    ["Offset of field: bladerf_version::minor"]
        [::std::mem::offset_of!(bladerf_version, minor) - 2usize];
    ["Offset of field: bladerf_version::patch"]
        [::std::mem::offset_of!(bladerf_version, patch) - 4usize];
    ["Offset of field: bladerf_version::describe"]
        [::std::mem::offset_of!(bladerf_version, describe) - 8usize];
};
pub const bladerf_fpga_size_BLADERF_FPGA_UNKNOWN: bladerf_fpga_size = 0;
pub const bladerf_fpga_size_BLADERF_FPGA_40KLE: bladerf_fpga_size = 40;
pub const bladerf_fpga_size_BLADERF_FPGA_115KLE: bladerf_fpga_size = 115;
pub const bladerf_fpga_size_BLADERF_FPGA_A4: bladerf_fpga_size = 49;
pub const bladerf_fpga_size_BLADERF_FPGA_A5: bladerf_fpga_size = 77;
pub const bladerf_fpga_size_BLADERF_FPGA_A9: bladerf_fpga_size = 301;
pub type bladerf_fpga_size = ::std::os::raw::c_uint;
pub const bladerf_dev_speed_BLADERF_DEVICE_SPEED_UNKNOWN: bladerf_dev_speed = 0;
pub const bladerf_dev_speed_BLADERF_DEVICE_SPEED_HIGH: bladerf_dev_speed = 1;
pub const bladerf_dev_speed_BLADERF_DEVICE_SPEED_SUPER: bladerf_dev_speed = 2;
pub type bladerf_dev_speed = ::std::os::raw::c_uint;
pub const bladerf_fpga_source_BLADERF_FPGA_SOURCE_UNKNOWN: bladerf_fpga_source = 0;
pub const bladerf_fpga_source_BLADERF_FPGA_SOURCE_FLASH: bladerf_fpga_source = 1;
pub const bladerf_fpga_source_BLADERF_FPGA_SOURCE_HOST: bladerf_fpga_source = 2;
pub type bladerf_fpga_source = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_get_serial(
        dev: *mut bladerf,
        serial: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_serial_struct(
        dev: *mut bladerf,
        serial: *mut bladerf_serial,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_fpga_size(
        dev: *mut bladerf,
        size: *mut bladerf_fpga_size,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_fpga_bytes(dev: *mut bladerf, size: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_flash_size(
        dev: *mut bladerf,
        size: *mut u32,
        is_guess: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_fw_version(
        dev: *mut bladerf,
        version: *mut bladerf_version,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_is_fpga_configured(dev: *mut bladerf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_fpga_version(
        dev: *mut bladerf,
        version: *mut bladerf_version,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_fpga_source(
        dev: *mut bladerf,
        source: *mut bladerf_fpga_source,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_device_speed(dev: *mut bladerf) -> bladerf_dev_speed;
}
extern "C" {
    pub fn bladerf_get_board_name(dev: *mut bladerf) -> *const ::std::os::raw::c_char;
}
pub type bladerf_channel = ::std::os::raw::c_int;
pub type bladerf_module = bladerf_channel;
pub const bladerf_direction_BLADERF_RX: bladerf_direction = 0;
pub const bladerf_direction_BLADERF_TX: bladerf_direction = 1;
pub type bladerf_direction = ::std::os::raw::c_uint;
pub const bladerf_channel_layout_BLADERF_RX_X1: bladerf_channel_layout = 0;
pub const bladerf_channel_layout_BLADERF_TX_X1: bladerf_channel_layout = 1;
pub const bladerf_channel_layout_BLADERF_RX_X2: bladerf_channel_layout = 2;
pub const bladerf_channel_layout_BLADERF_TX_X2: bladerf_channel_layout = 3;
pub type bladerf_channel_layout = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_get_channel_count(dev: *mut bladerf, dir: bladerf_direction) -> usize;
}
pub type bladerf_gain = ::std::os::raw::c_int;
pub const bladerf_gain_mode_BLADERF_GAIN_DEFAULT: bladerf_gain_mode = 0;
pub const bladerf_gain_mode_BLADERF_GAIN_MGC: bladerf_gain_mode = 1;
pub const bladerf_gain_mode_BLADERF_GAIN_FASTATTACK_AGC: bladerf_gain_mode = 2;
pub const bladerf_gain_mode_BLADERF_GAIN_SLOWATTACK_AGC: bladerf_gain_mode = 3;
pub const bladerf_gain_mode_BLADERF_GAIN_HYBRID_AGC: bladerf_gain_mode = 4;
pub type bladerf_gain_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_gain_modes {
    pub name: *const ::std::os::raw::c_char,
    pub mode: bladerf_gain_mode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_gain_modes"][::std::mem::size_of::<bladerf_gain_modes>() - 16usize];
    ["Alignment of bladerf_gain_modes"][::std::mem::align_of::<bladerf_gain_modes>() - 8usize];
    ["Offset of field: bladerf_gain_modes::name"]
        [::std::mem::offset_of!(bladerf_gain_modes, name) - 0usize];
    ["Offset of field: bladerf_gain_modes::mode"]
        [::std::mem::offset_of!(bladerf_gain_modes, mode) - 8usize];
};
extern "C" {
    pub fn bladerf_set_gain(
        dev: *mut bladerf,
        ch: bladerf_channel,
        gain: bladerf_gain,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_gain(
        dev: *mut bladerf,
        ch: bladerf_channel,
        gain: *mut bladerf_gain,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_gain_mode(
        dev: *mut bladerf,
        ch: bladerf_channel,
        mode: bladerf_gain_mode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_gain_mode(
        dev: *mut bladerf,
        ch: bladerf_channel,
        mode: *mut bladerf_gain_mode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_gain_modes(
        dev: *mut bladerf,
        ch: bladerf_channel,
        modes: *mut *const bladerf_gain_modes,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_gain_range(
        dev: *mut bladerf,
        ch: bladerf_channel,
        range: *mut *const bladerf_range,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_gain_stage(
        dev: *mut bladerf,
        ch: bladerf_channel,
        stage: *const ::std::os::raw::c_char,
        gain: bladerf_gain,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_gain_stage(
        dev: *mut bladerf,
        ch: bladerf_channel,
        stage: *const ::std::os::raw::c_char,
        gain: *mut bladerf_gain,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_gain_stage_range(
        dev: *mut bladerf,
        ch: bladerf_channel,
        stage: *const ::std::os::raw::c_char,
        range: *mut *const bladerf_range,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_gain_stages(
        dev: *mut bladerf,
        ch: bladerf_channel,
        stages: *mut *const ::std::os::raw::c_char,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
pub type bladerf_sample_rate = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_rational_rate {
    pub integer: u64,
    pub num: u64,
    pub den: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_rational_rate"][::std::mem::size_of::<bladerf_rational_rate>() - 24usize];
    ["Alignment of bladerf_rational_rate"]
        [::std::mem::align_of::<bladerf_rational_rate>() - 8usize];
    ["Offset of field: bladerf_rational_rate::integer"]
        [::std::mem::offset_of!(bladerf_rational_rate, integer) - 0usize];
    ["Offset of field: bladerf_rational_rate::num"]
        [::std::mem::offset_of!(bladerf_rational_rate, num) - 8usize];
    ["Offset of field: bladerf_rational_rate::den"]
        [::std::mem::offset_of!(bladerf_rational_rate, den) - 16usize];
};
extern "C" {
    pub fn bladerf_set_sample_rate(
        dev: *mut bladerf,
        ch: bladerf_channel,
        rate: bladerf_sample_rate,
        actual: *mut bladerf_sample_rate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_rational_sample_rate(
        dev: *mut bladerf,
        ch: bladerf_channel,
        rate: *mut bladerf_rational_rate,
        actual: *mut bladerf_rational_rate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_sample_rate(
        dev: *mut bladerf,
        ch: bladerf_channel,
        rate: *mut bladerf_sample_rate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_sample_rate_range(
        dev: *mut bladerf,
        ch: bladerf_channel,
        range: *mut *const bladerf_range,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rational_sample_rate(
        dev: *mut bladerf,
        ch: bladerf_channel,
        rate: *mut bladerf_rational_rate,
    ) -> ::std::os::raw::c_int;
}
pub type bladerf_bandwidth = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_set_bandwidth(
        dev: *mut bladerf,
        ch: bladerf_channel,
        bandwidth: bladerf_bandwidth,
        actual: *mut bladerf_bandwidth,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_bandwidth(
        dev: *mut bladerf,
        ch: bladerf_channel,
        bandwidth: *mut bladerf_bandwidth,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_bandwidth_range(
        dev: *mut bladerf,
        ch: bladerf_channel,
        range: *mut *const bladerf_range,
    ) -> ::std::os::raw::c_int;
}
pub type bladerf_frequency = u64;
extern "C" {
    pub fn bladerf_select_band(
        dev: *mut bladerf,
        ch: bladerf_channel,
        frequency: bladerf_frequency,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_frequency(
        dev: *mut bladerf,
        ch: bladerf_channel,
        frequency: bladerf_frequency,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_frequency(
        dev: *mut bladerf,
        ch: bladerf_channel,
        frequency: *mut bladerf_frequency,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_frequency_range(
        dev: *mut bladerf,
        ch: bladerf_channel,
        range: *mut *const bladerf_range,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_loopback_BLADERF_LB_NONE: bladerf_loopback = 0;
pub const bladerf_loopback_BLADERF_LB_FIRMWARE: bladerf_loopback = 1;
pub const bladerf_loopback_BLADERF_LB_BB_TXLPF_RXVGA2: bladerf_loopback = 2;
pub const bladerf_loopback_BLADERF_LB_BB_TXVGA1_RXVGA2: bladerf_loopback = 3;
pub const bladerf_loopback_BLADERF_LB_BB_TXLPF_RXLPF: bladerf_loopback = 4;
pub const bladerf_loopback_BLADERF_LB_BB_TXVGA1_RXLPF: bladerf_loopback = 5;
pub const bladerf_loopback_BLADERF_LB_RF_LNA1: bladerf_loopback = 6;
pub const bladerf_loopback_BLADERF_LB_RF_LNA2: bladerf_loopback = 7;
pub const bladerf_loopback_BLADERF_LB_RF_LNA3: bladerf_loopback = 8;
pub const bladerf_loopback_BLADERF_LB_RFIC_BIST: bladerf_loopback = 9;
pub type bladerf_loopback = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_loopback_modes {
    pub name: *const ::std::os::raw::c_char,
    pub mode: bladerf_loopback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_loopback_modes"][::std::mem::size_of::<bladerf_loopback_modes>() - 16usize];
    ["Alignment of bladerf_loopback_modes"]
        [::std::mem::align_of::<bladerf_loopback_modes>() - 8usize];
    ["Offset of field: bladerf_loopback_modes::name"]
        [::std::mem::offset_of!(bladerf_loopback_modes, name) - 0usize];
    ["Offset of field: bladerf_loopback_modes::mode"]
        [::std::mem::offset_of!(bladerf_loopback_modes, mode) - 8usize];
};
extern "C" {
    pub fn bladerf_get_loopback_modes(
        dev: *mut bladerf,
        modes: *mut *const bladerf_loopback_modes,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_is_loopback_mode_supported(dev: *mut bladerf, mode: bladerf_loopback) -> bool;
}
extern "C" {
    pub fn bladerf_set_loopback(dev: *mut bladerf, lb: bladerf_loopback) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_loopback(
        dev: *mut bladerf,
        lb: *mut bladerf_loopback,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_trigger_role_BLADERF_TRIGGER_ROLE_INVALID: bladerf_trigger_role = -1;
pub const bladerf_trigger_role_BLADERF_TRIGGER_ROLE_DISABLED: bladerf_trigger_role = 0;
pub const bladerf_trigger_role_BLADERF_TRIGGER_ROLE_MASTER: bladerf_trigger_role = 1;
pub const bladerf_trigger_role_BLADERF_TRIGGER_ROLE_SLAVE: bladerf_trigger_role = 2;
pub type bladerf_trigger_role = ::std::os::raw::c_int;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_INVALID: bladerf_trigger_signal = -1;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_J71_4: bladerf_trigger_signal = 0;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_J51_1: bladerf_trigger_signal = 1;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_MINI_EXP_1: bladerf_trigger_signal = 2;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_USER_0: bladerf_trigger_signal = 128;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_USER_1: bladerf_trigger_signal = 129;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_USER_2: bladerf_trigger_signal = 130;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_USER_3: bladerf_trigger_signal = 131;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_USER_4: bladerf_trigger_signal = 132;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_USER_5: bladerf_trigger_signal = 133;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_USER_6: bladerf_trigger_signal = 134;
pub const bladerf_trigger_signal_BLADERF_TRIGGER_USER_7: bladerf_trigger_signal = 135;
pub type bladerf_trigger_signal = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_trigger {
    pub channel: bladerf_channel,
    pub role: bladerf_trigger_role,
    pub signal: bladerf_trigger_signal,
    pub options: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_trigger"][::std::mem::size_of::<bladerf_trigger>() - 24usize];
    ["Alignment of bladerf_trigger"][::std::mem::align_of::<bladerf_trigger>() - 8usize];
    ["Offset of field: bladerf_trigger::channel"]
        [::std::mem::offset_of!(bladerf_trigger, channel) - 0usize];
    ["Offset of field: bladerf_trigger::role"]
        [::std::mem::offset_of!(bladerf_trigger, role) - 4usize];
    ["Offset of field: bladerf_trigger::signal"]
        [::std::mem::offset_of!(bladerf_trigger, signal) - 8usize];
    ["Offset of field: bladerf_trigger::options"]
        [::std::mem::offset_of!(bladerf_trigger, options) - 16usize];
};
extern "C" {
    pub fn bladerf_trigger_init(
        dev: *mut bladerf,
        ch: bladerf_channel,
        signal: bladerf_trigger_signal,
        trigger: *mut bladerf_trigger,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_trigger_arm(
        dev: *mut bladerf,
        trigger: *const bladerf_trigger,
        arm: bool,
        resv1: u64,
        resv2: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_trigger_fire(
        dev: *mut bladerf,
        trigger: *const bladerf_trigger,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_trigger_state(
        dev: *mut bladerf,
        trigger: *const bladerf_trigger,
        is_armed: *mut bool,
        has_fired: *mut bool,
        fire_requested: *mut bool,
        resv1: *mut u64,
        resv2: *mut u64,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_rx_mux_BLADERF_RX_MUX_INVALID: bladerf_rx_mux = -1;
pub const bladerf_rx_mux_BLADERF_RX_MUX_BASEBAND: bladerf_rx_mux = 0;
pub const bladerf_rx_mux_BLADERF_RX_MUX_12BIT_COUNTER: bladerf_rx_mux = 1;
pub const bladerf_rx_mux_BLADERF_RX_MUX_32BIT_COUNTER: bladerf_rx_mux = 2;
pub const bladerf_rx_mux_BLADERF_RX_MUX_DIGITAL_LOOPBACK: bladerf_rx_mux = 4;
pub type bladerf_rx_mux = ::std::os::raw::c_int;
extern "C" {
    pub fn bladerf_set_rx_mux(dev: *mut bladerf, mux: bladerf_rx_mux) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rx_mux(
        dev: *mut bladerf,
        mode: *mut bladerf_rx_mux,
    ) -> ::std::os::raw::c_int;
}
pub type bladerf_timestamp = u64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bladerf_quick_tune {
    pub __bindgen_anon_1: bladerf_quick_tune__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bladerf_quick_tune__bindgen_ty_1 {
    pub __bindgen_anon_1: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1 {
    pub freqsel: u8,
    pub vcocap: u8,
    pub nint: u16,
    pub nfrac: u32,
    pub flags: u8,
    pub xb_gpio: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1>() - 12usize];
    ["Alignment of bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1::freqsel"]
        [::std::mem::offset_of!(bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1, freqsel) - 0usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1::vcocap"]
        [::std::mem::offset_of!(bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1, vcocap) - 1usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1::nint"]
        [::std::mem::offset_of!(bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1, nint) - 2usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1::nfrac"]
        [::std::mem::offset_of!(bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1, nfrac) - 4usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1, flags) - 8usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1::xb_gpio"]
        [::std::mem::offset_of!(bladerf_quick_tune__bindgen_ty_1__bindgen_ty_1, xb_gpio) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2 {
    pub nios_profile: u16,
    pub rffe_profile: u8,
    pub port: u8,
    pub spdt: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2>() - 6usize];
    ["Alignment of bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2::nios_profile"][::std::mem::offset_of!(
        bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2,
        nios_profile
    ) - 0usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2::rffe_profile"][::std::mem::offset_of!(
        bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2,
        rffe_profile
    ) - 2usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2::port"]
        [::std::mem::offset_of!(bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2, port) - 3usize];
    ["Offset of field: bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2::spdt"]
        [::std::mem::offset_of!(bladerf_quick_tune__bindgen_ty_1__bindgen_ty_2, spdt) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_quick_tune__bindgen_ty_1"]
        [::std::mem::size_of::<bladerf_quick_tune__bindgen_ty_1>() - 12usize];
    ["Alignment of bladerf_quick_tune__bindgen_ty_1"]
        [::std::mem::align_of::<bladerf_quick_tune__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_quick_tune"][::std::mem::size_of::<bladerf_quick_tune>() - 12usize];
    ["Alignment of bladerf_quick_tune"][::std::mem::align_of::<bladerf_quick_tune>() - 4usize];
};
extern "C" {
    pub fn bladerf_schedule_retune(
        dev: *mut bladerf,
        ch: bladerf_channel,
        timestamp: bladerf_timestamp,
        frequency: bladerf_frequency,
        quick_tune: *mut bladerf_quick_tune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_cancel_scheduled_retunes(
        dev: *mut bladerf,
        ch: bladerf_channel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_quick_tune(
        dev: *mut bladerf,
        ch: bladerf_channel,
        quick_tune: *mut bladerf_quick_tune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_print_quick_tune(
        dev: *mut bladerf,
        qt: *const bladerf_quick_tune,
    ) -> ::std::os::raw::c_int;
}
pub type bladerf_correction_value = i16;
pub const bladerf_correction_BLADERF_CORR_DCOFF_I: bladerf_correction = 0;
pub const bladerf_correction_BLADERF_CORR_DCOFF_Q: bladerf_correction = 1;
pub const bladerf_correction_BLADERF_CORR_PHASE: bladerf_correction = 2;
pub const bladerf_correction_BLADERF_CORR_GAIN: bladerf_correction = 3;
pub type bladerf_correction = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_set_correction(
        dev: *mut bladerf,
        ch: bladerf_channel,
        corr: bladerf_correction,
        value: bladerf_correction_value,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_correction(
        dev: *mut bladerf,
        ch: bladerf_channel,
        corr: bladerf_correction,
        value: *mut bladerf_correction_value,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_format_BLADERF_FORMAT_SC16_Q11: bladerf_format = 0;
pub const bladerf_format_BLADERF_FORMAT_SC16_Q11_META: bladerf_format = 1;
pub const bladerf_format_BLADERF_FORMAT_PACKET_META: bladerf_format = 2;
pub const bladerf_format_BLADERF_FORMAT_SC8_Q7: bladerf_format = 3;
pub const bladerf_format_BLADERF_FORMAT_SC8_Q7_META: bladerf_format = 4;
pub type bladerf_format = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_metadata {
    pub timestamp: bladerf_timestamp,
    pub flags: u32,
    pub status: u32,
    pub actual_count: ::std::os::raw::c_uint,
    pub reserved: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_metadata"][::std::mem::size_of::<bladerf_metadata>() - 56usize];
    ["Alignment of bladerf_metadata"][::std::mem::align_of::<bladerf_metadata>() - 8usize];
    ["Offset of field: bladerf_metadata::timestamp"]
        [::std::mem::offset_of!(bladerf_metadata, timestamp) - 0usize];
    ["Offset of field: bladerf_metadata::flags"]
        [::std::mem::offset_of!(bladerf_metadata, flags) - 8usize];
    ["Offset of field: bladerf_metadata::status"]
        [::std::mem::offset_of!(bladerf_metadata, status) - 12usize];
    ["Offset of field: bladerf_metadata::actual_count"]
        [::std::mem::offset_of!(bladerf_metadata, actual_count) - 16usize];
    ["Offset of field: bladerf_metadata::reserved"]
        [::std::mem::offset_of!(bladerf_metadata, reserved) - 20usize];
};
extern "C" {
    pub fn bladerf_interleave_stream_buffer(
        layout: bladerf_channel_layout,
        format: bladerf_format,
        buffer_size: ::std::os::raw::c_uint,
        samples: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_deinterleave_stream_buffer(
        layout: bladerf_channel_layout,
        format: bladerf_format,
        buffer_size: ::std::os::raw::c_uint,
        samples: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_enable_module(
        dev: *mut bladerf,
        ch: bladerf_channel,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_timestamp(
        dev: *mut bladerf,
        dir: bladerf_direction,
        timestamp: *mut bladerf_timestamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_sync_config(
        dev: *mut bladerf,
        layout: bladerf_channel_layout,
        format: bladerf_format,
        num_buffers: ::std::os::raw::c_uint,
        buffer_size: ::std::os::raw::c_uint,
        num_transfers: ::std::os::raw::c_uint,
        stream_timeout: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_sync_tx(
        dev: *mut bladerf,
        samples: *const ::std::os::raw::c_void,
        num_samples: ::std::os::raw::c_uint,
        metadata: *mut bladerf_metadata,
        timeout_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_sync_rx(
        dev: *mut bladerf,
        samples: *mut ::std::os::raw::c_void,
        num_samples: ::std::os::raw::c_uint,
        metadata: *mut bladerf_metadata,
        timeout_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_stream {
    _unused: [u8; 0],
}
pub type bladerf_stream_cb = ::std::option::Option<
    unsafe extern "C" fn(
        dev: *mut bladerf,
        stream: *mut bladerf_stream,
        meta: *mut bladerf_metadata,
        samples: *mut ::std::os::raw::c_void,
        num_samples: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn bladerf_init_stream(
        stream: *mut *mut bladerf_stream,
        dev: *mut bladerf,
        callback: bladerf_stream_cb,
        buffers: *mut *mut *mut ::std::os::raw::c_void,
        num_buffers: usize,
        format: bladerf_format,
        samples_per_buffer: usize,
        num_transfers: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_stream(
        stream: *mut bladerf_stream,
        layout: bladerf_channel_layout,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_submit_stream_buffer(
        stream: *mut bladerf_stream,
        buffer: *mut ::std::os::raw::c_void,
        timeout_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_submit_stream_buffer_nb(
        stream: *mut bladerf_stream,
        buffer: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_deinit_stream(stream: *mut bladerf_stream);
}
extern "C" {
    pub fn bladerf_set_stream_timeout(
        dev: *mut bladerf,
        dir: bladerf_direction,
        timeout: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_stream_timeout(
        dev: *mut bladerf,
        dir: bladerf_direction,
        timeout: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_flash_firmware(
        dev: *mut bladerf,
        firmware: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_load_fpga(
        dev: *mut bladerf,
        fpga: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_flash_fpga(
        dev: *mut bladerf,
        fpga_image: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_erase_stored_fpga(dev: *mut bladerf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_device_reset(dev: *mut bladerf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_fw_log(
        dev: *mut bladerf,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_jump_to_bootloader(dev: *mut bladerf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_bootloader_list(list: *mut *mut bladerf_devinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_load_fw_from_bootloader(
        device_identifier: *const ::std::os::raw::c_char,
        backend: bladerf_backend,
        bus: u8,
        addr: u8,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_INVALID: bladerf_image_type = -1;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_RAW: bladerf_image_type = 0;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_FIRMWARE: bladerf_image_type = 1;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_FPGA_40KLE: bladerf_image_type = 2;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_FPGA_115KLE: bladerf_image_type = 3;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_FPGA_A4: bladerf_image_type = 4;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_FPGA_A9: bladerf_image_type = 5;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_CALIBRATION: bladerf_image_type = 6;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_RX_DC_CAL: bladerf_image_type = 7;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_TX_DC_CAL: bladerf_image_type = 8;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_RX_IQ_CAL: bladerf_image_type = 9;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_TX_IQ_CAL: bladerf_image_type = 10;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_FPGA_A5: bladerf_image_type = 11;
pub const bladerf_image_type_BLADERF_IMAGE_TYPE_GAIN_CAL: bladerf_image_type = 12;
pub type bladerf_image_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_image {
    pub magic: [::std::os::raw::c_char; 8usize],
    pub checksum: [u8; 32usize],
    pub version: bladerf_version,
    pub timestamp: u64,
    pub serial: [::std::os::raw::c_char; 34usize],
    pub reserved: [::std::os::raw::c_char; 128usize],
    pub type_: bladerf_image_type,
    pub address: u32,
    pub length: u32,
    pub data: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_image"][::std::mem::size_of::<bladerf_image>() - 248usize];
    ["Alignment of bladerf_image"][::std::mem::align_of::<bladerf_image>() - 8usize];
    ["Offset of field: bladerf_image::magic"]
        [::std::mem::offset_of!(bladerf_image, magic) - 0usize];
    ["Offset of field: bladerf_image::checksum"]
        [::std::mem::offset_of!(bladerf_image, checksum) - 8usize];
    ["Offset of field: bladerf_image::version"]
        [::std::mem::offset_of!(bladerf_image, version) - 40usize];
    ["Offset of field: bladerf_image::timestamp"]
        [::std::mem::offset_of!(bladerf_image, timestamp) - 56usize];
    ["Offset of field: bladerf_image::serial"]
        [::std::mem::offset_of!(bladerf_image, serial) - 64usize];
    ["Offset of field: bladerf_image::reserved"]
        [::std::mem::offset_of!(bladerf_image, reserved) - 98usize];
    ["Offset of field: bladerf_image::type_"]
        [::std::mem::offset_of!(bladerf_image, type_) - 228usize];
    ["Offset of field: bladerf_image::address"]
        [::std::mem::offset_of!(bladerf_image, address) - 232usize];
    ["Offset of field: bladerf_image::length"]
        [::std::mem::offset_of!(bladerf_image, length) - 236usize];
    ["Offset of field: bladerf_image::data"]
        [::std::mem::offset_of!(bladerf_image, data) - 240usize];
};
extern "C" {
    pub fn bladerf_alloc_image(
        dev: *mut bladerf,
        type_: bladerf_image_type,
        address: u32,
        length: u32,
    ) -> *mut bladerf_image;
}
extern "C" {
    pub fn bladerf_alloc_cal_image(
        dev: *mut bladerf,
        fpga_size: bladerf_fpga_size,
        vctcxo_trim: u16,
    ) -> *mut bladerf_image;
}
extern "C" {
    pub fn bladerf_free_image(image: *mut bladerf_image);
}
extern "C" {
    pub fn bladerf_image_print_metadata(image: *const bladerf_image) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_image_type_to_string(type_: bladerf_image_type)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bladerf_image_write(
        dev: *mut bladerf,
        image: *mut bladerf_image,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_image_read(
        image: *mut bladerf_image,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_vctcxo_tamer_mode_BLADERF_VCTCXO_TAMER_INVALID: bladerf_vctcxo_tamer_mode = -1;
pub const bladerf_vctcxo_tamer_mode_BLADERF_VCTCXO_TAMER_DISABLED: bladerf_vctcxo_tamer_mode = 0;
pub const bladerf_vctcxo_tamer_mode_BLADERF_VCTCXO_TAMER_1_PPS: bladerf_vctcxo_tamer_mode = 1;
pub const bladerf_vctcxo_tamer_mode_BLADERF_VCTCXO_TAMER_10_MHZ: bladerf_vctcxo_tamer_mode = 2;
pub type bladerf_vctcxo_tamer_mode = ::std::os::raw::c_int;
extern "C" {
    pub fn bladerf_set_vctcxo_tamer_mode(
        dev: *mut bladerf,
        mode: bladerf_vctcxo_tamer_mode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_vctcxo_tamer_mode(
        dev: *mut bladerf,
        mode: *mut bladerf_vctcxo_tamer_mode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_vctcxo_trim(dev: *mut bladerf, trim: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_trim_dac_write(dev: *mut bladerf, val: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_trim_dac_read(dev: *mut bladerf, val: *mut u16) -> ::std::os::raw::c_int;
}
pub const bladerf_tuning_mode_BLADERF_TUNING_MODE_INVALID: bladerf_tuning_mode = -1;
pub const bladerf_tuning_mode_BLADERF_TUNING_MODE_HOST: bladerf_tuning_mode = 0;
pub const bladerf_tuning_mode_BLADERF_TUNING_MODE_FPGA: bladerf_tuning_mode = 1;
pub type bladerf_tuning_mode = ::std::os::raw::c_int;
extern "C" {
    pub fn bladerf_set_tuning_mode(
        dev: *mut bladerf,
        mode: bladerf_tuning_mode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_tuning_mode(
        dev: *mut bladerf,
        mode: *mut bladerf_tuning_mode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_read_trigger(
        dev: *mut bladerf,
        ch: bladerf_channel,
        signal: bladerf_trigger_signal,
        val: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_write_trigger(
        dev: *mut bladerf,
        ch: bladerf_channel,
        signal: bladerf_trigger_signal,
        val: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_wishbone_master_read(
        dev: *mut bladerf,
        addr: u32,
        data: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_wishbone_master_write(
        dev: *mut bladerf,
        addr: u32,
        val: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_config_gpio_read(dev: *mut bladerf, val: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_config_gpio_write(dev: *mut bladerf, val: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_erase_flash(
        dev: *mut bladerf,
        erase_block: u32,
        count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_erase_flash_bytes(
        dev: *mut bladerf,
        address: u32,
        length: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_read_flash(
        dev: *mut bladerf,
        buf: *mut u8,
        page: u32,
        count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_read_flash_bytes(
        dev: *mut bladerf,
        buf: *mut u8,
        address: u32,
        bytes: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_write_flash(
        dev: *mut bladerf,
        buf: *const u8,
        page: u32,
        count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_write_flash_bytes(
        dev: *mut bladerf,
        buf: *const u8,
        address: u32,
        length: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_lock_otp(dev: *mut bladerf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_read_otp(dev: *mut bladerf, buf: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_write_otp(dev: *mut bladerf, buf: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_rf_port(
        dev: *mut bladerf,
        ch: bladerf_channel,
        port: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rf_port(
        dev: *mut bladerf,
        ch: bladerf_channel,
        port: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rf_ports(
        dev: *mut bladerf,
        ch: bladerf_channel,
        ports: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_feature_BLADERF_FEATURE_DEFAULT: bladerf_feature = 0;
pub const bladerf_feature_BLADERF_FEATURE_OVERSAMPLE: bladerf_feature = 1;
pub type bladerf_feature = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_enable_feature(
        dev: *mut bladerf,
        feature: bladerf_feature,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_feature(
        dev: *mut bladerf,
        feature: *mut bladerf_feature,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_gain_cal_entry {
    pub freq: bladerf_frequency,
    pub gain_corr: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_gain_cal_entry"][::std::mem::size_of::<bladerf_gain_cal_entry>() - 16usize];
    ["Alignment of bladerf_gain_cal_entry"]
        [::std::mem::align_of::<bladerf_gain_cal_entry>() - 8usize];
    ["Offset of field: bladerf_gain_cal_entry::freq"]
        [::std::mem::offset_of!(bladerf_gain_cal_entry, freq) - 0usize];
    ["Offset of field: bladerf_gain_cal_entry::gain_corr"]
        [::std::mem::offset_of!(bladerf_gain_cal_entry, gain_corr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_gain_cal_tbl {
    pub version: bladerf_version,
    pub ch: bladerf_channel,
    pub enabled: bool,
    pub n_entries: u32,
    pub start_freq: bladerf_frequency,
    pub stop_freq: bladerf_frequency,
    pub entries: *mut bladerf_gain_cal_entry,
    pub gain_target: bladerf_gain,
    pub file_path_len: usize,
    pub file_path: *mut ::std::os::raw::c_char,
    pub state: bladerf_gain_cal_tbl_gain_cal_state,
}
pub const bladerf_gain_cal_tbl_gain_cal_state_BLADERF_GAIN_CAL_UNINITIALIZED:
    bladerf_gain_cal_tbl_gain_cal_state = 0;
pub const bladerf_gain_cal_tbl_gain_cal_state_BLADERF_GAIN_CAL_LOADED:
    bladerf_gain_cal_tbl_gain_cal_state = 1;
pub const bladerf_gain_cal_tbl_gain_cal_state_BLADERF_GAIN_CAL_UNLOADED:
    bladerf_gain_cal_tbl_gain_cal_state = 2;
pub type bladerf_gain_cal_tbl_gain_cal_state = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_gain_cal_tbl"][::std::mem::size_of::<bladerf_gain_cal_tbl>() - 88usize];
    ["Alignment of bladerf_gain_cal_tbl"][::std::mem::align_of::<bladerf_gain_cal_tbl>() - 8usize];
    ["Offset of field: bladerf_gain_cal_tbl::version"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, version) - 0usize];
    ["Offset of field: bladerf_gain_cal_tbl::ch"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, ch) - 16usize];
    ["Offset of field: bladerf_gain_cal_tbl::enabled"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, enabled) - 20usize];
    ["Offset of field: bladerf_gain_cal_tbl::n_entries"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, n_entries) - 24usize];
    ["Offset of field: bladerf_gain_cal_tbl::start_freq"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, start_freq) - 32usize];
    ["Offset of field: bladerf_gain_cal_tbl::stop_freq"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, stop_freq) - 40usize];
    ["Offset of field: bladerf_gain_cal_tbl::entries"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, entries) - 48usize];
    ["Offset of field: bladerf_gain_cal_tbl::gain_target"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, gain_target) - 56usize];
    ["Offset of field: bladerf_gain_cal_tbl::file_path_len"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, file_path_len) - 64usize];
    ["Offset of field: bladerf_gain_cal_tbl::file_path"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, file_path) - 72usize];
    ["Offset of field: bladerf_gain_cal_tbl::state"]
        [::std::mem::offset_of!(bladerf_gain_cal_tbl, state) - 80usize];
};
extern "C" {
    pub fn bladerf_load_gain_calibration(
        dev: *mut bladerf,
        ch: bladerf_channel,
        cal_file_loc: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_print_gain_calibration(
        dev: *mut bladerf,
        ch: bladerf_channel,
        with_entries: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_enable_gain_calibration(
        dev: *mut bladerf,
        ch: bladerf_channel,
        en: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_gain_calibration(
        dev: *mut bladerf,
        ch: bladerf_channel,
        tbl: *mut *const bladerf_gain_cal_tbl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_gain_target(
        dev: *mut bladerf,
        ch: bladerf_channel,
        gain_target: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_xb_BLADERF_XB_NONE: bladerf_xb = 0;
pub const bladerf_xb_BLADERF_XB_100: bladerf_xb = 1;
pub const bladerf_xb_BLADERF_XB_200: bladerf_xb = 2;
pub const bladerf_xb_BLADERF_XB_300: bladerf_xb = 3;
pub type bladerf_xb = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_expansion_attach(dev: *mut bladerf, xb: bladerf_xb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_expansion_get_attached(
        dev: *mut bladerf,
        xb: *mut bladerf_xb,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_log_level_BLADERF_LOG_LEVEL_VERBOSE: bladerf_log_level = 0;
pub const bladerf_log_level_BLADERF_LOG_LEVEL_DEBUG: bladerf_log_level = 1;
pub const bladerf_log_level_BLADERF_LOG_LEVEL_INFO: bladerf_log_level = 2;
pub const bladerf_log_level_BLADERF_LOG_LEVEL_WARNING: bladerf_log_level = 3;
pub const bladerf_log_level_BLADERF_LOG_LEVEL_ERROR: bladerf_log_level = 4;
pub const bladerf_log_level_BLADERF_LOG_LEVEL_CRITICAL: bladerf_log_level = 5;
pub const bladerf_log_level_BLADERF_LOG_LEVEL_SILENT: bladerf_log_level = 6;
pub type bladerf_log_level = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_log_set_verbosity(level: bladerf_log_level);
}
extern "C" {
    pub fn bladerf_version(version: *mut bladerf_version);
}
extern "C" {
    pub fn bladerf_strerror(error: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
pub const bladerf_lna_gain_BLADERF_LNA_GAIN_UNKNOWN: bladerf_lna_gain = 0;
pub const bladerf_lna_gain_BLADERF_LNA_GAIN_BYPASS: bladerf_lna_gain = 1;
pub const bladerf_lna_gain_BLADERF_LNA_GAIN_MID: bladerf_lna_gain = 2;
pub const bladerf_lna_gain_BLADERF_LNA_GAIN_MAX: bladerf_lna_gain = 3;
pub type bladerf_lna_gain = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_set_txvga2(
        dev: *mut bladerf,
        gain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_txvga2(
        dev: *mut bladerf,
        gain: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_txvga1(
        dev: *mut bladerf,
        gain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_txvga1(
        dev: *mut bladerf,
        gain: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_lna_gain(dev: *mut bladerf, gain: bladerf_lna_gain)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_lna_gain(
        dev: *mut bladerf,
        gain: *mut bladerf_lna_gain,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_rxvga1(
        dev: *mut bladerf,
        gain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rxvga1(
        dev: *mut bladerf,
        gain: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_rxvga2(
        dev: *mut bladerf,
        gain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rxvga2(
        dev: *mut bladerf,
        gain: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_sampling_BLADERF_SAMPLING_UNKNOWN: bladerf_sampling = 0;
pub const bladerf_sampling_BLADERF_SAMPLING_INTERNAL: bladerf_sampling = 1;
pub const bladerf_sampling_BLADERF_SAMPLING_EXTERNAL: bladerf_sampling = 2;
pub type bladerf_sampling = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_set_sampling(
        dev: *mut bladerf,
        sampling: bladerf_sampling,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_sampling(
        dev: *mut bladerf,
        sampling: *mut bladerf_sampling,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_lpf_mode_BLADERF_LPF_NORMAL: bladerf_lpf_mode = 0;
pub const bladerf_lpf_mode_BLADERF_LPF_BYPASSED: bladerf_lpf_mode = 1;
pub const bladerf_lpf_mode_BLADERF_LPF_DISABLED: bladerf_lpf_mode = 2;
pub type bladerf_lpf_mode = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_set_lpf_mode(
        dev: *mut bladerf,
        ch: bladerf_channel,
        mode: bladerf_lpf_mode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_lpf_mode(
        dev: *mut bladerf,
        ch: bladerf_channel,
        mode: *mut bladerf_lpf_mode,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_smb_mode_BLADERF_SMB_MODE_INVALID: bladerf_smb_mode = -1;
pub const bladerf_smb_mode_BLADERF_SMB_MODE_DISABLED: bladerf_smb_mode = 0;
pub const bladerf_smb_mode_BLADERF_SMB_MODE_OUTPUT: bladerf_smb_mode = 1;
pub const bladerf_smb_mode_BLADERF_SMB_MODE_INPUT: bladerf_smb_mode = 2;
pub const bladerf_smb_mode_BLADERF_SMB_MODE_UNAVAILBLE: bladerf_smb_mode = 3;
pub type bladerf_smb_mode = ::std::os::raw::c_int;
extern "C" {
    pub fn bladerf_set_smb_mode(dev: *mut bladerf, mode: bladerf_smb_mode)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_smb_mode(
        dev: *mut bladerf,
        mode: *mut bladerf_smb_mode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_rational_smb_frequency(
        dev: *mut bladerf,
        rate: *mut bladerf_rational_rate,
        actual: *mut bladerf_rational_rate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_smb_frequency(
        dev: *mut bladerf,
        rate: u32,
        actual: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rational_smb_frequency(
        dev: *mut bladerf,
        rate: *mut bladerf_rational_rate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_smb_frequency(
        dev: *mut bladerf,
        rate: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_expansion_gpio_read(dev: *mut bladerf, val: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_expansion_gpio_write(dev: *mut bladerf, val: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_expansion_gpio_masked_write(
        dev: *mut bladerf,
        mask: u32,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_expansion_gpio_dir_read(
        dev: *mut bladerf,
        outputs: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_expansion_gpio_dir_write(
        dev: *mut bladerf,
        outputs: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_expansion_gpio_dir_masked_write(
        dev: *mut bladerf,
        mask: u32,
        outputs: u32,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_xb200_filter_BLADERF_XB200_50M: bladerf_xb200_filter = 0;
pub const bladerf_xb200_filter_BLADERF_XB200_144M: bladerf_xb200_filter = 1;
pub const bladerf_xb200_filter_BLADERF_XB200_222M: bladerf_xb200_filter = 2;
pub const bladerf_xb200_filter_BLADERF_XB200_CUSTOM: bladerf_xb200_filter = 3;
pub const bladerf_xb200_filter_BLADERF_XB200_AUTO_1DB: bladerf_xb200_filter = 4;
pub const bladerf_xb200_filter_BLADERF_XB200_AUTO_3DB: bladerf_xb200_filter = 5;
pub type bladerf_xb200_filter = ::std::os::raw::c_uint;
pub const bladerf_xb200_path_BLADERF_XB200_BYPASS: bladerf_xb200_path = 0;
pub const bladerf_xb200_path_BLADERF_XB200_MIX: bladerf_xb200_path = 1;
pub type bladerf_xb200_path = ::std::os::raw::c_uint;
pub const bladerf_xb300_trx_BLADERF_XB300_TRX_INVAL: bladerf_xb300_trx = -1;
pub const bladerf_xb300_trx_BLADERF_XB300_TRX_TX: bladerf_xb300_trx = 0;
pub const bladerf_xb300_trx_BLADERF_XB300_TRX_RX: bladerf_xb300_trx = 1;
pub const bladerf_xb300_trx_BLADERF_XB300_TRX_UNSET: bladerf_xb300_trx = 2;
pub type bladerf_xb300_trx = ::std::os::raw::c_int;
pub const bladerf_xb300_amplifier_BLADERF_XB300_AMP_INVAL: bladerf_xb300_amplifier = -1;
pub const bladerf_xb300_amplifier_BLADERF_XB300_AMP_PA: bladerf_xb300_amplifier = 0;
pub const bladerf_xb300_amplifier_BLADERF_XB300_AMP_LNA: bladerf_xb300_amplifier = 1;
pub const bladerf_xb300_amplifier_BLADERF_XB300_AMP_PA_AUX: bladerf_xb300_amplifier = 2;
pub type bladerf_xb300_amplifier = ::std::os::raw::c_int;
extern "C" {
    pub fn bladerf_xb200_set_filterbank(
        dev: *mut bladerf,
        ch: bladerf_channel,
        filter: bladerf_xb200_filter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_xb200_get_filterbank(
        dev: *mut bladerf,
        ch: bladerf_channel,
        filter: *mut bladerf_xb200_filter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_xb200_set_path(
        dev: *mut bladerf,
        ch: bladerf_channel,
        path: bladerf_xb200_path,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_xb200_get_path(
        dev: *mut bladerf,
        ch: bladerf_channel,
        path: *mut bladerf_xb200_path,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_xb300_set_trx(
        dev: *mut bladerf,
        trx: bladerf_xb300_trx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_xb300_get_trx(
        dev: *mut bladerf,
        trx: *mut bladerf_xb300_trx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_xb300_set_amplifier_enable(
        dev: *mut bladerf,
        amp: bladerf_xb300_amplifier,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_xb300_get_amplifier_enable(
        dev: *mut bladerf,
        amp: bladerf_xb300_amplifier,
        enable: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_xb300_get_output_power(
        dev: *mut bladerf,
        val: *mut f32,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_cal_module_BLADERF_DC_CAL_INVALID: bladerf_cal_module = -1;
pub const bladerf_cal_module_BLADERF_DC_CAL_LPF_TUNING: bladerf_cal_module = 0;
pub const bladerf_cal_module_BLADERF_DC_CAL_TX_LPF: bladerf_cal_module = 1;
pub const bladerf_cal_module_BLADERF_DC_CAL_RX_LPF: bladerf_cal_module = 2;
pub const bladerf_cal_module_BLADERF_DC_CAL_RXVGA2: bladerf_cal_module = 3;
pub type bladerf_cal_module = ::std::os::raw::c_int;
extern "C" {
    pub fn bladerf_calibrate_dc(
        dev: *mut bladerf,
        module: bladerf_cal_module,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_dac_write(dev: *mut bladerf, val: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_dac_read(dev: *mut bladerf, val: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_si5338_read(
        dev: *mut bladerf,
        address: u8,
        val: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_si5338_write(dev: *mut bladerf, address: u8, val: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_lms_read(dev: *mut bladerf, address: u8, val: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_lms_write(dev: *mut bladerf, address: u8, val: u8) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_lms_dc_cals {
    pub lpf_tuning: i16,
    pub tx_lpf_i: i16,
    pub tx_lpf_q: i16,
    pub rx_lpf_i: i16,
    pub rx_lpf_q: i16,
    pub dc_ref: i16,
    pub rxvga2a_i: i16,
    pub rxvga2a_q: i16,
    pub rxvga2b_i: i16,
    pub rxvga2b_q: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_lms_dc_cals"][::std::mem::size_of::<bladerf_lms_dc_cals>() - 20usize];
    ["Alignment of bladerf_lms_dc_cals"][::std::mem::align_of::<bladerf_lms_dc_cals>() - 2usize];
    ["Offset of field: bladerf_lms_dc_cals::lpf_tuning"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, lpf_tuning) - 0usize];
    ["Offset of field: bladerf_lms_dc_cals::tx_lpf_i"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, tx_lpf_i) - 2usize];
    ["Offset of field: bladerf_lms_dc_cals::tx_lpf_q"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, tx_lpf_q) - 4usize];
    ["Offset of field: bladerf_lms_dc_cals::rx_lpf_i"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, rx_lpf_i) - 6usize];
    ["Offset of field: bladerf_lms_dc_cals::rx_lpf_q"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, rx_lpf_q) - 8usize];
    ["Offset of field: bladerf_lms_dc_cals::dc_ref"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, dc_ref) - 10usize];
    ["Offset of field: bladerf_lms_dc_cals::rxvga2a_i"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, rxvga2a_i) - 12usize];
    ["Offset of field: bladerf_lms_dc_cals::rxvga2a_q"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, rxvga2a_q) - 14usize];
    ["Offset of field: bladerf_lms_dc_cals::rxvga2b_i"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, rxvga2b_i) - 16usize];
    ["Offset of field: bladerf_lms_dc_cals::rxvga2b_q"]
        [::std::mem::offset_of!(bladerf_lms_dc_cals, rxvga2b_q) - 18usize];
};
extern "C" {
    pub fn bladerf_lms_set_dc_cals(
        dev: *mut bladerf,
        dc_cals: *const bladerf_lms_dc_cals,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_lms_get_dc_cals(
        dev: *mut bladerf,
        dc_cals: *mut bladerf_lms_dc_cals,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_xb_spi_write(dev: *mut bladerf, val: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_bias_tee(
        dev: *mut bladerf,
        ch: bladerf_channel,
        enable: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_bias_tee(
        dev: *mut bladerf,
        ch: bladerf_channel,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rfic_register(
        dev: *mut bladerf,
        address: u16,
        val: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_rfic_register(
        dev: *mut bladerf,
        address: u16,
        val: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rfic_temperature(dev: *mut bladerf, val: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rfic_rssi(
        dev: *mut bladerf,
        ch: bladerf_channel,
        pre_rssi: *mut i32,
        sym_rssi: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rfic_ctrl_out(dev: *mut bladerf, ctrl_out: *mut u8)
        -> ::std::os::raw::c_int;
}
pub const bladerf_rfic_rxfir_BLADERF_RFIC_RXFIR_BYPASS: bladerf_rfic_rxfir = 0;
pub const bladerf_rfic_rxfir_BLADERF_RFIC_RXFIR_CUSTOM: bladerf_rfic_rxfir = 1;
pub const bladerf_rfic_rxfir_BLADERF_RFIC_RXFIR_DEC1: bladerf_rfic_rxfir = 2;
pub const bladerf_rfic_rxfir_BLADERF_RFIC_RXFIR_DEC2: bladerf_rfic_rxfir = 3;
pub const bladerf_rfic_rxfir_BLADERF_RFIC_RXFIR_DEC4: bladerf_rfic_rxfir = 4;
pub type bladerf_rfic_rxfir = ::std::os::raw::c_uint;
pub const bladerf_rfic_txfir_BLADERF_RFIC_TXFIR_BYPASS: bladerf_rfic_txfir = 0;
pub const bladerf_rfic_txfir_BLADERF_RFIC_TXFIR_CUSTOM: bladerf_rfic_txfir = 1;
pub const bladerf_rfic_txfir_BLADERF_RFIC_TXFIR_INT1: bladerf_rfic_txfir = 2;
pub const bladerf_rfic_txfir_BLADERF_RFIC_TXFIR_INT2: bladerf_rfic_txfir = 3;
pub const bladerf_rfic_txfir_BLADERF_RFIC_TXFIR_INT4: bladerf_rfic_txfir = 4;
pub type bladerf_rfic_txfir = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_get_rfic_rx_fir(
        dev: *mut bladerf,
        rxfir: *mut bladerf_rfic_rxfir,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_rfic_rx_fir(
        dev: *mut bladerf,
        rxfir: bladerf_rfic_rxfir,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_rfic_tx_fir(
        dev: *mut bladerf,
        txfir: *mut bladerf_rfic_txfir,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_rfic_tx_fir(
        dev: *mut bladerf,
        txfir: bladerf_rfic_txfir,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_pll_lock_state(
        dev: *mut bladerf,
        locked: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_pll_enable(dev: *mut bladerf, enabled: *mut bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_pll_enable(dev: *mut bladerf, enable: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_pll_refclk_range(
        dev: *mut bladerf,
        range: *mut *const bladerf_range,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_pll_refclk(dev: *mut bladerf, frequency: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_pll_refclk(dev: *mut bladerf, frequency: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_pll_register(
        dev: *mut bladerf,
        address: u8,
        val: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_pll_register(
        dev: *mut bladerf,
        address: u8,
        val: u32,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_power_sources_BLADERF_UNKNOWN: bladerf_power_sources = 0;
pub const bladerf_power_sources_BLADERF_PS_DC: bladerf_power_sources = 1;
pub const bladerf_power_sources_BLADERF_PS_USB_VBUS: bladerf_power_sources = 2;
pub type bladerf_power_sources = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_get_power_source(
        dev: *mut bladerf,
        val: *mut bladerf_power_sources,
    ) -> ::std::os::raw::c_int;
}
pub const bladerf_clock_select_CLOCK_SELECT_ONBOARD: bladerf_clock_select = 0;
pub const bladerf_clock_select_CLOCK_SELECT_EXTERNAL: bladerf_clock_select = 1;
pub type bladerf_clock_select = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_get_clock_select(
        dev: *mut bladerf,
        sel: *mut bladerf_clock_select,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_clock_select(
        dev: *mut bladerf,
        sel: bladerf_clock_select,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_get_clock_output(dev: *mut bladerf, state: *mut bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bladerf_set_clock_output(dev: *mut bladerf, enable: bool) -> ::std::os::raw::c_int;
}
pub const bladerf_pmic_register_BLADERF_PMIC_CONFIGURATION: bladerf_pmic_register = 0;
pub const bladerf_pmic_register_BLADERF_PMIC_VOLTAGE_SHUNT: bladerf_pmic_register = 1;
pub const bladerf_pmic_register_BLADERF_PMIC_VOLTAGE_BUS: bladerf_pmic_register = 2;
pub const bladerf_pmic_register_BLADERF_PMIC_POWER: bladerf_pmic_register = 3;
pub const bladerf_pmic_register_BLADERF_PMIC_CURRENT: bladerf_pmic_register = 4;
pub const bladerf_pmic_register_BLADERF_PMIC_CALIBRATION: bladerf_pmic_register = 5;
pub type bladerf_pmic_register = ::std::os::raw::c_uint;
extern "C" {
    pub fn bladerf_get_pmic_register(
        dev: *mut bladerf,
        reg: bladerf_pmic_register,
        val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bladerf_rf_switch_config {
    pub tx1_rfic_port: u32,
    pub tx1_spdt_port: u32,
    pub tx2_rfic_port: u32,
    pub tx2_spdt_port: u32,
    pub rx1_rfic_port: u32,
    pub rx1_spdt_port: u32,
    pub rx2_rfic_port: u32,
    pub rx2_spdt_port: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bladerf_rf_switch_config"]
        [::std::mem::size_of::<bladerf_rf_switch_config>() - 32usize];
    ["Alignment of bladerf_rf_switch_config"]
        [::std::mem::align_of::<bladerf_rf_switch_config>() - 4usize];
    ["Offset of field: bladerf_rf_switch_config::tx1_rfic_port"]
        [::std::mem::offset_of!(bladerf_rf_switch_config, tx1_rfic_port) - 0usize];
    ["Offset of field: bladerf_rf_switch_config::tx1_spdt_port"]
        [::std::mem::offset_of!(bladerf_rf_switch_config, tx1_spdt_port) - 4usize];
    ["Offset of field: bladerf_rf_switch_config::tx2_rfic_port"]
        [::std::mem::offset_of!(bladerf_rf_switch_config, tx2_rfic_port) - 8usize];
    ["Offset of field: bladerf_rf_switch_config::tx2_spdt_port"]
        [::std::mem::offset_of!(bladerf_rf_switch_config, tx2_spdt_port) - 12usize];
    ["Offset of field: bladerf_rf_switch_config::rx1_rfic_port"]
        [::std::mem::offset_of!(bladerf_rf_switch_config, rx1_rfic_port) - 16usize];
    ["Offset of field: bladerf_rf_switch_config::rx1_spdt_port"]
        [::std::mem::offset_of!(bladerf_rf_switch_config, rx1_spdt_port) - 20usize];
    ["Offset of field: bladerf_rf_switch_config::rx2_rfic_port"]
        [::std::mem::offset_of!(bladerf_rf_switch_config, rx2_rfic_port) - 24usize];
    ["Offset of field: bladerf_rf_switch_config::rx2_spdt_port"]
        [::std::mem::offset_of!(bladerf_rf_switch_config, rx2_spdt_port) - 28usize];
};
extern "C" {
    pub fn bladerf_get_rf_switch_config(
        dev: *mut bladerf,
        config: *mut bladerf_rf_switch_config,
    ) -> ::std::os::raw::c_int;
}
